"use strict";
/* Muhamad Ristiyanto _ https://github.com/Gimenz
 * Created, Published at Selasa, 9 Maret 2021
 * Modified, Updated at Rabu, 8 Desember 2021
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.igApi = void 0;
const axios_1 = __importDefault(require("axios"));
const utils_1 = require("./utils");
const RequestHandler_1 = require("./helper/RequestHandler");
const CookieHandler_1 = require("./helper/CookieHandler");
const query_1 = require("./helper/query");
__exportStar(require("./utils"), exports);
__exportStar(require("./helper/Session"), exports);
class igApi {
    /**
     * Recommended to set session id for most all IG Request
     * @param session_id session id you can get it by using getSessionId function, see README.md or example file
     */
    constructor(session_id = '') {
        this.session_id = session_id;
        this.cookie = new CookieHandler_1.CookieHandler(this.session_id);
        /**
         * Set session id for most all IG Request
         * @param {session_id} session_id
         */
        this.setCookie = (session_id = this.session_id) => {
            try {
                if (!this.cookie.check()) {
                    this.cookie.save(session_id);
                }
                else {
                    this.cookie.update(session_id);
                }
            }
            catch (error) {
                throw new Error(error.message);
            }
        };
        /**
         * get user id by username
         * @param {username} username
         * @returns
         */
        this.getIdByUsername = (username) => __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield RequestHandler_1.IGFetch.get(`/${username}/?__a=1`);
                return data.graphql.user.id;
            }
            catch (error) {
                if (error.response.status == 403) {
                    throw new Error('Forbidden, try set cookie first');
                }
                else if (error.response.status == 401) {
                    throw new Error('Unauthorized, try set cookie first');
                }
                else if (error.request) {
                    throw new Error(error.request);
                }
                else {
                    throw new Error(error.message);
                }
            }
        });
        /**
         * format metadata
         * @param {PostGraphQL} metadata
         * @returns
         */
        this._formatSidecar = (metadata) => {
            const graphql = metadata.shortcode_media;
            let links = [];
            if (graphql.__typename == 'GraphSidecar') {
                graphql.edge_sidecar_to_children.edges.forEach(doc => {
                    let obj = {};
                    obj.type = doc.node.is_video ? 'video' : 'image';
                    obj.url = doc.node.is_video ? doc.node.video_url : doc.node.display_url;
                    obj.dimensions = doc.node.dimensions;
                    links.push(obj);
                });
            }
            else if (graphql.__typename == 'GraphVideo') {
                let obj = {};
                obj.type = graphql.is_video ? 'video' : 'image';
                obj.url = graphql.is_video ? graphql.video_url : graphql.display_url;
                obj.dimensions = graphql.dimensions;
                links.push(obj);
            }
            else if (graphql.__typename == 'GraphImage') {
                let obj = {};
                obj.type = graphql.is_video ? 'video' : 'image';
                obj.url = graphql.is_video ? graphql.video_url : graphql.display_url;
                obj.dimensions = graphql.dimensions;
                links.push(obj);
            }
            return links;
        };
        /**
         * fetch instagram post by url
         * @param {url} url url of instagram post, you can get metadata from private profile if you use session id \w your account that follows target account
         * @returns {Promise<IGPostMetadata>}
         */
        this.fetchPost = (url) => __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c;
            try {
                if (!this.cookie.check())
                    throw new Error('set cookie first to use this function');
                const post = (0, utils_1.shortcodeFormatter)(url);
                const graphql = (yield RequestHandler_1.IGFetch.get(`/${post.type}/${post.shortcode}/?__a=1`))
                    .data.graphql;
                const metaData = graphql.shortcode_media;
                return {
                    username: metaData.owner.username,
                    name: metaData.owner.full_name,
                    media_id: metaData.id,
                    shortcode: metaData.shortcode,
                    taken_at_timestamp: metaData.taken_at_timestamp,
                    likes: metaData.edge_media_preview_like.count,
                    caption: metaData.edge_media_to_caption.edges.length >= 1
                        ? metaData.edge_media_to_caption.edges[0].node.text
                        : '',
                    media_count: metaData.__typename == 'GraphSidecar'
                        ? metaData.edge_sidecar_to_children.edges.length
                        : 1,
                    comment_count: metaData.edge_media_to_parent_comment.count,
                    links: this._formatSidecar(graphql),
                };
            }
            catch (error) {
                if (axios_1.default.isAxiosError(error)) {
                    if (((_a = error.response) === null || _a === void 0 ? void 0 : _a.status) == 404) {
                        throw new Error('Post Not Found');
                    }
                    else if (((_b = error.response) === null || _b === void 0 ? void 0 : _b.status) == 403) {
                        throw new Error('Forbidden, try set cookie first');
                    }
                    else if (((_c = error.response) === null || _c === void 0 ? void 0 : _c.status) == 401) {
                        throw new Error('Unauthorized, try set cookie first');
                    }
                    else {
                        throw error.toJSON();
                    }
                }
                else {
                    throw new Error(error);
                }
            }
        });
        /**
         * fetch profile by username
         * @param {String} username
         * @returns {Promise<IGUserMetadata>}
         */
        this.fetchUser = (username) => __awaiter(this, void 0, void 0, function* () {
            var _d, _e, _f;
            try {
                const userID = yield this.getIdByUsername(username);
                const { data } = yield RequestHandler_1.IGUser.get(`/${userID}/info/`);
                const graphql = data;
                const isSet = typeof graphql.user.full_name !== 'undefined';
                if (!this.cookie.check())
                    throw new Error('set cookie first to use this function');
                if (!isSet && this.cookie.check())
                    throw new Error('Invalid cookie, pls update with new cookie');
                return {
                    id: graphql.user.pk,
                    username: graphql.user.username,
                    fullname: graphql.user.full_name,
                    followers: graphql.user.follower_count,
                    following: graphql.user.following_count,
                    post_count: graphql.user.media_count,
                    is_private: graphql.user.is_private,
                    is_verified: graphql.user.is_verified,
                    biography: graphql.user.biography,
                    external_url: graphql.user.external_url,
                    total_igtv_videos: graphql.user.total_igtv_videos,
                    has_videos: graphql.user.has_videos,
                    hd_profile_pic_url_info: graphql.user.hd_profile_pic_url_info,
                    has_highlight_reels: graphql.user.has_highlight_reels,
                    has_guides: graphql.user.has_guides,
                    is_business: graphql.user.is_business,
                    contact_phone_number: graphql.user.contact_phone_number,
                    public_email: graphql.user.public_email,
                    account_type: graphql.user.account_type,
                };
            }
            catch (error) {
                if (axios_1.default.isAxiosError(error)) {
                    if (((_d = error.response) === null || _d === void 0 ? void 0 : _d.status) == 404) {
                        throw new Error('User Not Found');
                    }
                    else if (((_e = error.response) === null || _e === void 0 ? void 0 : _e.status) == 403) {
                        throw new Error('Forbidden, try set cookie first');
                    }
                    else if (((_f = error.response) === null || _f === void 0 ? void 0 : _f.status) == 401) {
                        throw new Error('Unauthorized, try set cookie first');
                    }
                    else {
                        throw error.toJSON();
                    }
                }
                else {
                    throw new Error(error);
                }
            }
        });
        /**
         *
         * @param {StoriesGraphQL} metadata
         * @returns {ItemStories[]}
         */
        this._parseStories = (metadata) => {
            const items = metadata.items;
            let storyList = new Array();
            for (let i = 0; i < items.length; i++) {
                if (items[i].media_type == 1) {
                    storyList.push({
                        type: 'image',
                        mimetype: 'image/jpeg',
                        url: items[i].image_versions2.candidates[0].url,
                        taken_at: items[i].taken_at,
                        expiring_at: items[i].expiring_at,
                        id: items[i].id,
                        original_width: items[i].original_width,
                        original_height: items[i].original_height,
                        has_audio: items[i].has_audio !== undefined ? items[i].has_audio : null,
                        video_duration: items[i].video_duration !== undefined
                            ? items[i].video_duration
                            : null,
                        caption: items[i].caption,
                    });
                }
                else {
                    storyList.push({
                        type: 'video',
                        mimetype: 'video/mp4',
                        url: items[i].video_versions[0].url,
                        taken_at: items[i].taken_at,
                        expiring_at: items[i].expiring_at,
                        id: items[i].id,
                        original_width: items[i].original_width,
                        original_height: items[i].original_height,
                        has_audio: items[i].has_audio !== undefined ? items[i].has_audio : false,
                        video_duration: items[i].video_duration !== undefined
                            ? items[i].video_duration
                            : null,
                        caption: items[i].caption,
                    });
                }
            }
            return storyList;
        };
        /**
         * fetches stories metadata (THIS FUNCTION REQUIRES SESSION ID)
         * @param {string} username username target to fetch the stories, also work with private profile if you use session id \w your account that follows target account
         * @returns
         */
        this.fetchStories = (username) => __awaiter(this, void 0, void 0, function* () {
            var _g, _h, _j;
            try {
                if (!this.cookie.check())
                    throw new Error('set cookie first to use this function');
                const userID = yield this.getIdByUsername(username);
                const { data } = yield RequestHandler_1.IGStories.get(`/${userID}/reel_media/`);
                const graphql = data;
                const isFollowing = typeof graphql.user.friendship_status !== 'undefined';
                if (!isFollowing && graphql.user.is_private)
                    throw new Error('Private profile');
                if (graphql.items.length == 0)
                    throw new Error('Stories not available');
                return {
                    username: graphql.user.username,
                    stories_count: graphql.media_count,
                    stories: this._parseStories(graphql),
                };
            }
            catch (error) {
                if (axios_1.default.isAxiosError(error)) {
                    if (((_g = error.response) === null || _g === void 0 ? void 0 : _g.status) == 404) {
                        throw new Error('Stories Not Found');
                    }
                    else if (((_h = error.response) === null || _h === void 0 ? void 0 : _h.status) == 403) {
                        throw new Error('Forbidden, try set cookie first');
                    }
                    else if (((_j = error.response) === null || _j === void 0 ? void 0 : _j.status) == 401) {
                        throw new Error('Unauthorized, try set cookie first');
                    }
                    else {
                        throw error.toJSON();
                    }
                }
                else {
                    throw new Error(error);
                }
            }
        });
        /**
         * Fetch all reels/highlight id
         * @param {username} username
         * @returns
         */
        this._getReelsIds = (username) => __awaiter(this, void 0, void 0, function* () {
            var _k, _l, _m;
            try {
                const userID = yield this.getIdByUsername(username);
                const { data } = yield RequestHandler_1.IGHighlight.get('', {
                    params: (0, query_1.highlight_ids_query)(userID)
                });
                const graphql = data;
                let items = new Array();
                graphql.data.user.edge_highlight_reels.edges.map((edge) => {
                    items.push({
                        highlight_id: edge.node.id,
                        cover: edge.node.cover_media.thumbnail_src,
                        title: edge.node.title
                    });
                });
                return items;
            }
            catch (error) {
                if (axios_1.default.isAxiosError(error)) {
                    if (((_k = error.response) === null || _k === void 0 ? void 0 : _k.status) == 404) {
                        throw new Error('Post Not Found');
                    }
                    else if (((_l = error.response) === null || _l === void 0 ? void 0 : _l.status) == 403) {
                        throw new Error('Forbidden, try set cookie first');
                    }
                    else if (((_m = error.response) === null || _m === void 0 ? void 0 : _m.status) == 401) {
                        throw new Error('Unauthorized, try set cookie first');
                    }
                    else {
                        throw error.toJSON();
                    }
                }
                else {
                    throw new Error(error);
                }
            }
        });
        /**
         * get media urls from highlight id
         * @param {ids} id of highlight
         * @returns
         */
        this._getReels = (ids) => __awaiter(this, void 0, void 0, function* () {
            var _o, _p, _q;
            try {
                const { data } = yield RequestHandler_1.IGHighlight.get('', { params: (0, query_1.highlight_media_query)(ids) });
                const graphql = data;
                let result = graphql.data.reels_media[0].items.map((item) => ({
                    media_id: item.id,
                    mimetype: item.is_video ? 'video/mp4' || 'video/gif' : 'image/jpeg',
                    taken_at: item.taken_at_timestamp,
                    type: item.is_video ? 'video' : 'image',
                    url: item.is_video ? item.video_resources[0].src : item.display_url,
                    dimensions: item.dimensions
                }));
                return result;
            }
            catch (error) {
                if (axios_1.default.isAxiosError(error)) {
                    if (((_o = error.response) === null || _o === void 0 ? void 0 : _o.status) == 404) {
                        throw new Error('Post Not Found');
                    }
                    else if (((_p = error.response) === null || _p === void 0 ? void 0 : _p.status) == 403) {
                        throw new Error('Forbidden, try set cookie first');
                    }
                    else if (((_q = error.response) === null || _q === void 0 ? void 0 : _q.status) == 401) {
                        throw new Error('Unauthorized, try set cookie first');
                    }
                    else {
                        throw error.toJSON();
                    }
                }
                else {
                    throw new Error(error);
                }
            }
        });
        /**
         * fetches highlight metadata (REQUIRES SESSION ID)
         * @param {string} username username target to fetch the highlights, also work with private profile if you use session id \w your account that follows target account
         * @returns
         */
        this.fetchHighlights = (username) => __awaiter(this, void 0, void 0, function* () {
            try {
                if (!this.cookie.check())
                    throw new Error('set cookie first to use this function');
                const ids = yield this._getReelsIds(username);
                const reels = yield Promise.all(ids.map(x => this._getReels(x.highlight_id)));
                let data = [];
                for (let i = 0; i < reels.length; i++) {
                    data.push({
                        title: ids[i].title,
                        cover: ids[i].cover,
                        media_count: reels[i].length,
                        highlights_id: ids[i].highlight_id,
                        highlights: reels[i]
                    });
                }
                let json = {
                    username,
                    highlights_count: ids.length,
                    data: data
                };
                return json;
            }
            catch (error) {
                throw new Error(error);
            }
        });
        this.session_id = session_id;
        this.setCookie(this.session_id);
    }
}
exports.igApi = igApi;
